generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Educationist {
  id             Int                 @id @default(autoincrement())
  name           String
  email          String              @unique
  specialization String?
  token          String              @unique @default(dbgenerated("encode(gen_random_bytes(4), 'hex')"))
  deviceTokens   String[]
  children       ChildEducationist[]
  createdAt      DateTime            @default(now())
}

model Therapist {
  id             Int              @id @default(autoincrement())
  name           String
  specialization String?
  token          String           @unique @default(dbgenerated("encode(gen_random_bytes(4), 'hex')"))
  deviceTokens   String[]
  email          String           @unique
  licenseNumber  String           @unique
  children       ChildTherapist[]
  createdAt      DateTime         @default(now())
}

model Child {
  id            Int                 @id @default(autoincrement())
  name          String
  parentName    String
  email         String              @unique
  birthDate     DateTime
  supportLevel  Int?
  class         String
  token         String              @unique @default(dbgenerated("encode(gen_random_bytes(4), 'hex')"))
  deviceTokens  String[]
  educationists ChildEducationist[]
  therapists    ChildTherapist[]
  records       Record[]
  createdAt     DateTime            @default(now())
}

model ChildEducationist {
  child          Child        @relation(fields: [childId], references: [id])
  childId        Int
  educationist   Educationist @relation(fields: [educationistId], references: [id])
  educationistId Int

  @@id([childId, educationistId])
}

model ChildTherapist {
  child       Child     @relation(fields: [childId], references: [id])
  childId     Int
  therapist   Therapist @relation(fields: [therapistId], references: [id])
  therapistId Int

  @@id([childId, therapistId])
}

model Record {
  id         Int          @id @default(autoincrement())
  child      Child        @relation(fields: [childId], references: [id])
  childId    Int
  authorId   Int
  authorRole String
  authorName String
  content    String
  createdAt  DateTime     @default(now())
  symptoms   String[]
  reads      RecordRead[]
}

model RecordRead {
  record   Record    @relation(fields: [recordId], references: [id])
  recordId Int
  userId   Int
  userRole String
  readAt   DateTime?

  @@id([recordId, userId, userRole])
}
